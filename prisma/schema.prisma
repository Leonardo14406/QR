// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// Role enum used to seed roles / keep consistent names
enum RoleName {
  GENERATOR
  RECEIVER
  ADMIN
  SCANNER
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  emailVerified   Boolean         @default(false)
  emailVerifiedAt DateTime?
  passwordHash    String?
  firstName       String?
  lastName        String?
  avatarUrl       String?
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // password reset
  resetToken      String?
  resetTokenExp   DateTime?

  roles           UserRole[]      
  refreshTokens   RefreshToken[]

  // NEW: relation to generated qr codes
  qrCodes         qrCode[]

  // NEW: per-user settings
  settings        userSettings?
}

model Role {
  id    Int       @id @default(autoincrement())
  name  RoleName  @unique
  users UserRole[]
}

model UserRole {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     Int
  assignedAt DateTime @default(now())

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model RefreshToken {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  tokenHash   String   // SHA-256 hex of the refresh token value
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  revoked     Boolean  @default(false)
  replacedBy  String?  // id of token that replaced this (for rotation)
  ip          String?
  userAgent   String?

  @@index([userId])
  @@index([tokenHash])
}

// NEW: General-purpose qr codes
model qrCode {
  id           String    @id @default(uuid())
  code         String    @unique            // Opaque token used in the qr image
  payload      Json?                           // Arbitrary data (ticket ID, text, etc.)
  type         String    @default("generic")  // e.g., "ticket"
  oneTime      Boolean   @default(true)       // If true, becomes invalid after first successful validation
  isValid      Boolean   @default(true)       // Current validity flag
  createdAt    DateTime  @default(now())
  validatedAt  DateTime?
  expiresAt    DateTime?
  pageId       String?   // Optional page ID for linking to a specific page in the app

  // Who generated it
  createdBy    String
  creator      User      @relation(fields: [createdBy], references: [id])
  qrScans     qrScan[]   // Relation to scans
  @@index([code])
  @@index([createdBy])
}

model qrPage {
  id          String         @id @default(uuid())
  title       String?
  description String?
  style       Json?          // Store style as JSON object
  blocks      ContentBlock[] // Relation to content blocks
  createdAt   DateTime       @default(now())
}

model ContentBlock {
  id      String   @id @default(uuid())
  type    String
  content String
  style   Json?
  order   Int
  page    qrPage   @relation(fields: [pageId], references: [id])
  pageId  String
  alt     String?
  width   String?
  height  String?
}

model qrScan {
  id        String   @id @default(uuid())
  userId    String
  qrCodeId  String
  scannedAt DateTime @default(now())
  qrCode    qrCode   @relation(fields: [qrCodeId], references: [id])

  @@index([qrCodeId])
  @@index([userId])
}

// NEW: Per-user settings
model userSettings {
  id                    String   @id @default(uuid())
  user                  User     @relation(fields: [userId], references: [id])
  userId                String   @unique
  dailyGenericQrLimit   Int      @default(50)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([userId])
}
